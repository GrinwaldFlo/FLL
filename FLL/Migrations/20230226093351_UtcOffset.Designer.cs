// <auto-generated />
using System;
using FLL.Data.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FLL.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230226093351_UtcOffset")]
    partial class UtcOffset
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("FLL.Data.Models.Chrono", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("ContestID")
                        .HasColumnType("int");

                    b.Property<int>("DurationS")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.HasKey("ID");

                    b.HasIndex("ContestID");

                    b.ToTable("Chronos");
                });

            modelBuilder.Entity("FLL.Data.Models.Contest", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<Guid>("AdminGuid")
                        .HasColumnType("char(36)");

                    b.Property<DateTimeOffset?>("DateFrom")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTimeOffset?>("DateTo")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<Guid>("UserGuid")
                        .HasColumnType("char(36)");

                    b.Property<int>("UtcOffsetMin")
                        .HasColumnType("int");

                    b.Property<Guid>("ViewGuid")
                        .HasColumnType("char(36)");

                    b.HasKey("ID");

                    b.ToTable("Contests");
                });

            modelBuilder.Entity("FLL.Data.Models.ContestMatch", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("ContestID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("ContestID");

                    b.ToTable("ContestMatches");
                });

            modelBuilder.Entity("FLL.Data.Models.MatchItem", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("RoundItemID")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("TableID")
                        .HasColumnType("int");

                    b.Property<int?>("Team1ID")
                        .HasColumnType("int");

                    b.Property<int?>("Team2ID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("RoundItemID");

                    b.HasIndex("TableID");

                    b.HasIndex("Team1ID");

                    b.HasIndex("Team2ID");

                    b.ToTable("Matches");
                });

            modelBuilder.Entity("FLL.Data.Models.RoundItem", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("ContestMatchID")
                        .HasColumnType("int");

                    b.Property<double>("MinBtwMatch")
                        .HasColumnType("double");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<int>("RoundId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime(6)");

                    b.HasKey("ID");

                    b.HasIndex("ContestMatchID");

                    b.ToTable("Rounds");
                });

            modelBuilder.Entity("FLL.Data.Models.TableItem", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("ContestMatchID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<int>("TableId")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("ContestMatchID");

                    b.ToTable("Tables");
                });

            modelBuilder.Entity("FLL.Data.Models.TeamItem", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("ContestMatchID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<string>("School")
                        .HasColumnType("longtext");

                    b.Property<int>("TeamId")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("ContestMatchID");

                    b.ToTable("TeamItem");
                });

            modelBuilder.Entity("FLL.Data.Models.Chrono", b =>
                {
                    b.HasOne("FLL.Data.Models.Contest", "Contest")
                        .WithMany()
                        .HasForeignKey("ContestID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contest");
                });

            modelBuilder.Entity("FLL.Data.Models.ContestMatch", b =>
                {
                    b.HasOne("FLL.Data.Models.Contest", "Contest")
                        .WithMany()
                        .HasForeignKey("ContestID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contest");
                });

            modelBuilder.Entity("FLL.Data.Models.MatchItem", b =>
                {
                    b.HasOne("FLL.Data.Models.RoundItem", null)
                        .WithMany("Matchs")
                        .HasForeignKey("RoundItemID");

                    b.HasOne("FLL.Data.Models.TableItem", "Table")
                        .WithMany()
                        .HasForeignKey("TableID");

                    b.HasOne("FLL.Data.Models.TeamItem", "Team1")
                        .WithMany()
                        .HasForeignKey("Team1ID");

                    b.HasOne("FLL.Data.Models.TeamItem", "Team2")
                        .WithMany()
                        .HasForeignKey("Team2ID");

                    b.Navigation("Table");

                    b.Navigation("Team1");

                    b.Navigation("Team2");
                });

            modelBuilder.Entity("FLL.Data.Models.RoundItem", b =>
                {
                    b.HasOne("FLL.Data.Models.ContestMatch", null)
                        .WithMany("Rounds")
                        .HasForeignKey("ContestMatchID");
                });

            modelBuilder.Entity("FLL.Data.Models.TableItem", b =>
                {
                    b.HasOne("FLL.Data.Models.ContestMatch", null)
                        .WithMany("Tables")
                        .HasForeignKey("ContestMatchID");
                });

            modelBuilder.Entity("FLL.Data.Models.TeamItem", b =>
                {
                    b.HasOne("FLL.Data.Models.ContestMatch", null)
                        .WithMany("Teams")
                        .HasForeignKey("ContestMatchID");
                });

            modelBuilder.Entity("FLL.Data.Models.ContestMatch", b =>
                {
                    b.Navigation("Rounds");

                    b.Navigation("Tables");

                    b.Navigation("Teams");
                });

            modelBuilder.Entity("FLL.Data.Models.RoundItem", b =>
                {
                    b.Navigation("Matchs");
                });
#pragma warning restore 612, 618
        }
    }
}
